<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="
     http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
     http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
     http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">
    <context:annotation-config />
    <context:component-scan base-package="com.shop.service"/>
<!--    spring整合MyBatis框架-->
<!--    配置连接池-->
    <context:property-placeholder location="classpath:jdbc.properties"/>
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${jdbc.driver}" />
        <property name="jdbcUrl" value="${jdbc.url}" />
        <property name="user" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
    </bean>

    <!--Mybatis的SessionFactory配置-->
    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="mapperLocations" value="classpath:mapper/*.xml"></property>
<!--        分页插件-->
        <property name="plugins">
            <array>
                <bean class="com.github.pagehelper.PageInterceptor">
                    <property name="properties">
                        <value>
                        </value>
                    </property>
                </bean>
            </array>
        </property>
    </bean>

    <!--Mybatis的Mapper文件识别-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.shop.mapper"/>

    </bean>

    <!--    &lt;!&ndash; 导入数据库配置文件 &ndash;&gt;-->
    <!--    <context:property-placeholder location="classpath:jdbc.properties"/>-->
    <!--    &lt;!&ndash; 配置数据库连接池 &ndash;&gt;-->
    <!--    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">-->
    <!--        &lt;!&ndash; 基本属性 url、user、password &ndash;&gt;-->
    <!--        <property name="url" value="${jdbc.url}" />-->
    <!--        <property name="username" value="${jdbc.username}" />-->
    <!--        <property name="password" value="${jdbc.password}" />-->

    <!--        &lt;!&ndash; 配置初始化大小、最小、最大 &ndash;&gt;-->
    <!--        <property name="initialSize" value="1" />-->
    <!--        <property name="minIdle" value="1" />-->
    <!--        <property name="maxActive" value="20" />-->

    <!--        &lt;!&ndash; 配置获取连接等待超时的时间 &ndash;&gt;-->
    <!--        <property name="maxWait" value="60000" />-->

    <!--        &lt;!&ndash; 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 &ndash;&gt;-->
    <!--        <property name="timeBetweenEvictionRunsMillis" value="60000" />-->

    <!--        &lt;!&ndash; 配置一个连接在池中最小生存的时间，单位是毫秒 &ndash;&gt;-->
    <!--        <property name="minEvictableIdleTimeMillis" value="300000" />-->

    <!--        <property name="validationQuery" value="SELECT 1" />-->
    <!--        <property name="testWhileIdle" value="true" />-->
    <!--        <property name="testOnBorrow" value="false" />-->
    <!--        <property name="testOnReturn" value="false" />-->

    <!--        &lt;!&ndash; 打开PSCache，并且指定每个连接上PSCache的大小 &ndash;&gt;-->
    <!--        <property name="poolPreparedStatements" value="true" />-->
    <!--        <property name="maxPoolPreparedStatementPerConnectionSize"-->
    <!--                  value="20" />-->
    <!--    </bean>-->
    <!-- 事务管理 -->
    <tx:annotation-driven transaction-manager="transactionManager" />
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

</beans>